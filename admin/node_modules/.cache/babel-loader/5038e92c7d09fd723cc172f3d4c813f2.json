{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:5000/api/\";\nlet TOKEN = null;\nconst persistRoot = localStorage.getItem(\"persist:root\");\nif (persistRoot) {\n  try {\n    const userState = JSON.parse(persistRoot).user;\n    if (userState) {\n      const currentUser = JSON.parse(userState).currentUser;\n      if (currentUser) {\n        TOKEN = currentUser.accessToken;\n      }\n    }\n  } catch (error) {\n    console.error(\"Error parsing localStorage data:\", error);\n  }\n}\nconsole.log(\"Token:\", TOKEN);\nexport const publicRequest = axios.create({\n  baseURL: BASE_URL\n});\nconst userRequest = axios.create({\n  baseURL: BASE_URL\n});\nif (TOKEN) {\n  userRequest.interceptors.request.use(config => {\n    config.headers.Authorization = `Bearer ${TOKEN}`;\n    console.log(\"Request Headers:\", config.headers);\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  userRequest.interceptors.response.use(response => response, async error => {\n    if (error.response && error.response.status === 401) {\n      console.error(\"Token is expired or invalid:\", error.response.data);\n      // Try to refresh the token here\n      try {\n        const refreshResponse = await axios.post(`${BASE_URL}refreshToken`, {\n          token: localStorage.getItem(\"refreshToken\")\n        });\n        TOKEN = refreshResponse.data.accessToken;\n        // Update the token in localStorage\n        const persistRoot = localStorage.getItem(\"persist:root\");\n        if (persistRoot) {\n          const userState = JSON.parse(persistRoot).user;\n          if (userState) {\n            const currentUser = JSON.parse(userState).currentUser;\n            if (currentUser) {\n              currentUser.accessToken = TOKEN;\n              localStorage.setItem(\"persist:root\", JSON.stringify({\n                ...JSON.parse(persistRoot),\n                user: JSON.stringify({\n                  ...userState,\n                  currentUser\n                })\n              }));\n            }\n          }\n        }\n        // Retry the original request with the new token\n        error.config.headers.Authorization = `Bearer ${TOKEN}`;\n        return axios(error.config);\n      } catch (refreshError) {\n        console.error(\"Error refreshing token:\", refreshError);\n        // Handle refresh token failure (e.g., redirect to login)\n        window.location.href = \"/login\"; // Adjust this as needed\n      }\n    }\n    return Promise.reject(error);\n  });\n}\nexport { userRequest };","map":{"version":3,"names":["axios","BASE_URL","TOKEN","persistRoot","localStorage","getItem","userState","JSON","parse","user","currentUser","accessToken","error","console","log","publicRequest","create","baseURL","userRequest","interceptors","request","use","config","headers","Authorization","Promise","reject","response","status","data","refreshResponse","post","token","setItem","stringify","refreshError","window","location","href"],"sources":["C:/Users/njugi/OneDrive/Desktop/KOFIA_KE/admin/src/requestMethods.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/\";\r\n\r\nlet TOKEN = null;\r\n\r\nconst persistRoot = localStorage.getItem(\"persist:root\");\r\nif (persistRoot) {\r\n  try {\r\n    const userState = JSON.parse(persistRoot).user;\r\n    if (userState) {\r\n      const currentUser = JSON.parse(userState).currentUser;\r\n      if (currentUser) {\r\n        TOKEN = currentUser.accessToken;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error parsing localStorage data:\", error);\r\n  }\r\n}\r\n\r\nconsole.log(\"Token:\", TOKEN);\r\n\r\nexport const publicRequest = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\nconst userRequest = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\nif (TOKEN) {\r\n  userRequest.interceptors.request.use(\r\n    (config) => {\r\n      config.headers.Authorization = `Bearer ${TOKEN}`;\r\n      console.log(\"Request Headers:\", config.headers);\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  userRequest.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      if (error.response && error.response.status === 401) {\r\n        console.error(\"Token is expired or invalid:\", error.response.data);\r\n        // Try to refresh the token here\r\n        try {\r\n          const refreshResponse = await axios.post(`${BASE_URL}refreshToken`, {\r\n            token: localStorage.getItem(\"refreshToken\"),\r\n          });\r\n          TOKEN = refreshResponse.data.accessToken;\r\n          // Update the token in localStorage\r\n          const persistRoot = localStorage.getItem(\"persist:root\");\r\n          if (persistRoot) {\r\n            const userState = JSON.parse(persistRoot).user;\r\n            if (userState) {\r\n              const currentUser = JSON.parse(userState).currentUser;\r\n              if (currentUser) {\r\n                currentUser.accessToken = TOKEN;\r\n                localStorage.setItem(\r\n                  \"persist:root\",\r\n                  JSON.stringify({\r\n                    ...JSON.parse(persistRoot),\r\n                    user: JSON.stringify({ ...userState, currentUser }),\r\n                  })\r\n                );\r\n              }\r\n            }\r\n          }\r\n          // Retry the original request with the new token\r\n          error.config.headers.Authorization = `Bearer ${TOKEN}`;\r\n          return axios(error.config);\r\n        } catch (refreshError) {\r\n          console.error(\"Error refreshing token:\", refreshError);\r\n          // Handle refresh token failure (e.g., redirect to login)\r\n          window.location.href = \"/login\"; // Adjust this as needed\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n}\r\n\r\nexport { userRequest };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}